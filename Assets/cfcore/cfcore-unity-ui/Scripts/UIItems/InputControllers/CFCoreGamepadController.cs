//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/cfcore/cfcore-unity-ui/Scripts/UIItems/InputControllers/CFCoreGamepadController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Overwolf.CFCore.UnityUI.InputController
{
    public partial class @CFCoreGamepadController: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CFCoreGamepadController()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CFCoreGamepadController"",
    ""maps"": [
        {
            ""name"": ""ModBrowsing"",
            ""id"": ""b84d7356-cead-4fe0-bd68-24ffca96cbb0"",
            ""actions"": [
                {
                    ""name"": ""ClassNavigation"",
                    ""type"": ""Button"",
                    ""id"": ""2c4626bc-da51-4266-be1c-a19527c7988e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PaginationNavigation"",
                    ""type"": ""Button"",
                    ""id"": ""0434db5b-2269-45cc-a8ea-4e0eb11d7688"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SearchND"",
                    ""type"": ""Button"",
                    ""id"": ""501fad58-ce1b-4168-a5ff-754b31840ff9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SortFilterND"",
                    ""type"": ""Value"",
                    ""id"": ""39b1a0b6-b8a8-4164-8c07-6fc5a8bc69ca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d35c2c9a-b4e4-4006-9ebf-a53fde452d7a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClassNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2c62faf9-349a-4bb7-b7af-c977d7a0d7cd"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClassNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ca4e7faf-54f9-4d23-bbf5-25914ae7cd85"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClassNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8dcaf6bc-a3c1-41aa-9f68-145f97994136"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PaginationNavigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6b300fe1-68c7-4b38-b1ee-616fa86a513f"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PaginationNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ce0c011f-7987-42df-847e-96897a499480"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PaginationNavigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d3afcfa2-7895-4ea2-b69e-199fa3c2369a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SearchND"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""43626f3d-0f62-469b-8189-2ea81e94bdec"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SortFilterND"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f6cbc546-21c9-4d6e-a88f-718130646480"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SortFilterND"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""886bdc43-ce4d-48b7-b9c0-b3bbe94b3777"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SortFilterND"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dd4f0c17-6be2-4574-8b48-efc59012b1c2"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SortFilterND"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2559a1e0-bafc-498f-bfd2-63657070e44e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SortFilterND"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Popup"",
            ""id"": ""8db1b7f0-b2e6-480a-a34a-32e1710206e5"",
            ""actions"": [
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""3793fb6d-18cf-445b-a7fa-1ea069e32f50"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""886a60ec-dd75-474c-88ef-1e166b24516f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0d4520fe-06d6-4c20-be66-7a314b2f3b3b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04fda986-86a7-4603-a806-450030a2cabe"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5bf9edab-7d72-4f31-8a73-d8681b20ed51"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""03f4d26d-65d0-48f1-bd8f-bcf44eb27e89"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8b10430e-f01f-4ecf-b773-8e1f10eb963b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1310dd37-df42-4ca7-87d1-9787abac8a7a"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""022c6f68-8cbd-4b32-a08a-af6feb1c9547"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3775445c-311b-40bf-a9ba-480ba9924220"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""90afa850-d236-4d8c-bdfd-4d091123ed07"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""VirtualKeyboard"",
            ""id"": ""94f003f9-84a6-4c1b-9d06-25c3ef1fd4b2"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""17452dea-8e8d-476b-b5fd-763e983b2b05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""86c3cf6a-b67f-4b02-8521-5a3ddc6075bc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ModManipulation"",
            ""id"": ""a4544d03-f331-4fad-908d-f9c2d7a2d241"",
            ""actions"": [
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""142f7d41-821d-4fc7-ba35-13fc15e92e06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7c06db5-4bcf-4b78-afe2-9685439cbf29"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Basic"",
            ""id"": ""49f651be-9809-4fdd-bf7a-1a0c8f06d662"",
            ""actions"": [
                {
                    ""name"": ""1dNavigate"",
                    ""type"": ""Button"",
                    ""id"": ""4c3c56f7-dafe-4edd-8ac7-28c615a097ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""4107c9f2-66c0-482c-9d43-9200e053421f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""c8168aa1-6add-4721-b85e-19c14a17e74f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CustomWest"",
                    ""type"": ""Button"",
                    ""id"": ""9ba862ae-1a63-4b73-8b08-7d23a48ee9c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CustomNorth"",
                    ""type"": ""Button"",
                    ""id"": ""e7de22de-4863-46de-8d58-c256dc84e0cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5abab268-fb5d-4a8c-8813-8685967041b4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""1dNavigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e82b5025-7e9d-44e1-a70a-3583045bc18e"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""1dNavigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""728d598a-458e-4ab6-8d4a-aa84ea55b6c5"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""1dNavigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""79193619-1ce3-46ab-b9fd-efcefac5d47e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""870a5671-f3e4-4ad7-ad62-bd309a0b6157"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff20936a-b48b-4855-9b12-8cc18804792e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CustomWest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4db93740-e4a9-455d-896c-9516c7128b5c"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CustomNorth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseBindings"",
            ""id"": ""ad84b49d-a2ef-4d64-a67b-6c6dea3bfc41"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""cc9841a3-b1b9-47ec-bf1f-67210288ccf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""a985a1ac-d290-40f9-941d-8150fd7a018b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dcf465b5-e2ef-4ccf-905c-7ac798c5f17e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""83198524-2ffe-446c-976b-bf1ca492153c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd43df9a-53f7-414d-957d-80982ce57e1b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39619e1f-8640-4a5a-b67d-e3fe23f10278"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ModBrowsing
            m_ModBrowsing = asset.FindActionMap("ModBrowsing", throwIfNotFound: true);
            m_ModBrowsing_ClassNavigation = m_ModBrowsing.FindAction("ClassNavigation", throwIfNotFound: true);
            m_ModBrowsing_PaginationNavigation = m_ModBrowsing.FindAction("PaginationNavigation", throwIfNotFound: true);
            m_ModBrowsing_SearchND = m_ModBrowsing.FindAction("SearchND", throwIfNotFound: true);
            m_ModBrowsing_SortFilterND = m_ModBrowsing.FindAction("SortFilterND", throwIfNotFound: true);
            // Popup
            m_Popup = asset.FindActionMap("Popup", throwIfNotFound: true);
            m_Popup_Scroll = m_Popup.FindAction("Scroll", throwIfNotFound: true);
            // VirtualKeyboard
            m_VirtualKeyboard = asset.FindActionMap("VirtualKeyboard", throwIfNotFound: true);
            m_VirtualKeyboard_Newaction = m_VirtualKeyboard.FindAction("New action", throwIfNotFound: true);
            // ModManipulation
            m_ModManipulation = asset.FindActionMap("ModManipulation", throwIfNotFound: true);
            m_ModManipulation_Menu = m_ModManipulation.FindAction("Menu", throwIfNotFound: true);
            // Basic
            m_Basic = asset.FindActionMap("Basic", throwIfNotFound: true);
            m_Basic__1dNavigate = m_Basic.FindAction("1dNavigate", throwIfNotFound: true);
            m_Basic_Cancel = m_Basic.FindAction("Cancel", throwIfNotFound: true);
            m_Basic_Submit = m_Basic.FindAction("Submit", throwIfNotFound: true);
            m_Basic_CustomWest = m_Basic.FindAction("CustomWest", throwIfNotFound: true);
            m_Basic_CustomNorth = m_Basic.FindAction("CustomNorth", throwIfNotFound: true);
            // MouseBindings
            m_MouseBindings = asset.FindActionMap("MouseBindings", throwIfNotFound: true);
            m_MouseBindings_Newaction = m_MouseBindings.FindAction("New action", throwIfNotFound: true);
            m_MouseBindings_Click = m_MouseBindings.FindAction("Click", throwIfNotFound: true);
            m_MouseBindings_Point = m_MouseBindings.FindAction("Point", throwIfNotFound: true);
        }

        ~@CFCoreGamepadController()
        {
            UnityEngine.Debug.Assert(!m_ModBrowsing.enabled, "This will cause a leak and performance issues, CFCoreGamepadController.ModBrowsing.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Popup.enabled, "This will cause a leak and performance issues, CFCoreGamepadController.Popup.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_VirtualKeyboard.enabled, "This will cause a leak and performance issues, CFCoreGamepadController.VirtualKeyboard.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_ModManipulation.enabled, "This will cause a leak and performance issues, CFCoreGamepadController.ModManipulation.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Basic.enabled, "This will cause a leak and performance issues, CFCoreGamepadController.Basic.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_MouseBindings.enabled, "This will cause a leak and performance issues, CFCoreGamepadController.MouseBindings.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ModBrowsing
        private readonly InputActionMap m_ModBrowsing;
        private List<IModBrowsingActions> m_ModBrowsingActionsCallbackInterfaces = new List<IModBrowsingActions>();
        private readonly InputAction m_ModBrowsing_ClassNavigation;
        private readonly InputAction m_ModBrowsing_PaginationNavigation;
        private readonly InputAction m_ModBrowsing_SearchND;
        private readonly InputAction m_ModBrowsing_SortFilterND;
        public struct ModBrowsingActions
        {
            private @CFCoreGamepadController m_Wrapper;
            public ModBrowsingActions(@CFCoreGamepadController wrapper) { m_Wrapper = wrapper; }
            public InputAction @ClassNavigation => m_Wrapper.m_ModBrowsing_ClassNavigation;
            public InputAction @PaginationNavigation => m_Wrapper.m_ModBrowsing_PaginationNavigation;
            public InputAction @SearchND => m_Wrapper.m_ModBrowsing_SearchND;
            public InputAction @SortFilterND => m_Wrapper.m_ModBrowsing_SortFilterND;
            public InputActionMap Get() { return m_Wrapper.m_ModBrowsing; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ModBrowsingActions set) { return set.Get(); }
            public void AddCallbacks(IModBrowsingActions instance)
            {
                if (instance == null || m_Wrapper.m_ModBrowsingActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ModBrowsingActionsCallbackInterfaces.Add(instance);
                @ClassNavigation.started += instance.OnClassNavigation;
                @ClassNavigation.performed += instance.OnClassNavigation;
                @ClassNavigation.canceled += instance.OnClassNavigation;
                @PaginationNavigation.started += instance.OnPaginationNavigation;
                @PaginationNavigation.performed += instance.OnPaginationNavigation;
                @PaginationNavigation.canceled += instance.OnPaginationNavigation;
                @SearchND.started += instance.OnSearchND;
                @SearchND.performed += instance.OnSearchND;
                @SearchND.canceled += instance.OnSearchND;
                @SortFilterND.started += instance.OnSortFilterND;
                @SortFilterND.performed += instance.OnSortFilterND;
                @SortFilterND.canceled += instance.OnSortFilterND;
            }

            private void UnregisterCallbacks(IModBrowsingActions instance)
            {
                @ClassNavigation.started -= instance.OnClassNavigation;
                @ClassNavigation.performed -= instance.OnClassNavigation;
                @ClassNavigation.canceled -= instance.OnClassNavigation;
                @PaginationNavigation.started -= instance.OnPaginationNavigation;
                @PaginationNavigation.performed -= instance.OnPaginationNavigation;
                @PaginationNavigation.canceled -= instance.OnPaginationNavigation;
                @SearchND.started -= instance.OnSearchND;
                @SearchND.performed -= instance.OnSearchND;
                @SearchND.canceled -= instance.OnSearchND;
                @SortFilterND.started -= instance.OnSortFilterND;
                @SortFilterND.performed -= instance.OnSortFilterND;
                @SortFilterND.canceled -= instance.OnSortFilterND;
            }

            public void RemoveCallbacks(IModBrowsingActions instance)
            {
                if (m_Wrapper.m_ModBrowsingActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IModBrowsingActions instance)
            {
                foreach (var item in m_Wrapper.m_ModBrowsingActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ModBrowsingActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ModBrowsingActions @ModBrowsing => new ModBrowsingActions(this);

        // Popup
        private readonly InputActionMap m_Popup;
        private List<IPopupActions> m_PopupActionsCallbackInterfaces = new List<IPopupActions>();
        private readonly InputAction m_Popup_Scroll;
        public struct PopupActions
        {
            private @CFCoreGamepadController m_Wrapper;
            public PopupActions(@CFCoreGamepadController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Scroll => m_Wrapper.m_Popup_Scroll;
            public InputActionMap Get() { return m_Wrapper.m_Popup; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PopupActions set) { return set.Get(); }
            public void AddCallbacks(IPopupActions instance)
            {
                if (instance == null || m_Wrapper.m_PopupActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PopupActionsCallbackInterfaces.Add(instance);
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
            }

            private void UnregisterCallbacks(IPopupActions instance)
            {
                @Scroll.started -= instance.OnScroll;
                @Scroll.performed -= instance.OnScroll;
                @Scroll.canceled -= instance.OnScroll;
            }

            public void RemoveCallbacks(IPopupActions instance)
            {
                if (m_Wrapper.m_PopupActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPopupActions instance)
            {
                foreach (var item in m_Wrapper.m_PopupActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PopupActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PopupActions @Popup => new PopupActions(this);

        // VirtualKeyboard
        private readonly InputActionMap m_VirtualKeyboard;
        private List<IVirtualKeyboardActions> m_VirtualKeyboardActionsCallbackInterfaces = new List<IVirtualKeyboardActions>();
        private readonly InputAction m_VirtualKeyboard_Newaction;
        public struct VirtualKeyboardActions
        {
            private @CFCoreGamepadController m_Wrapper;
            public VirtualKeyboardActions(@CFCoreGamepadController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_VirtualKeyboard_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_VirtualKeyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(VirtualKeyboardActions set) { return set.Get(); }
            public void AddCallbacks(IVirtualKeyboardActions instance)
            {
                if (instance == null || m_Wrapper.m_VirtualKeyboardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_VirtualKeyboardActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IVirtualKeyboardActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IVirtualKeyboardActions instance)
            {
                if (m_Wrapper.m_VirtualKeyboardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IVirtualKeyboardActions instance)
            {
                foreach (var item in m_Wrapper.m_VirtualKeyboardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_VirtualKeyboardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public VirtualKeyboardActions @VirtualKeyboard => new VirtualKeyboardActions(this);

        // ModManipulation
        private readonly InputActionMap m_ModManipulation;
        private List<IModManipulationActions> m_ModManipulationActionsCallbackInterfaces = new List<IModManipulationActions>();
        private readonly InputAction m_ModManipulation_Menu;
        public struct ModManipulationActions
        {
            private @CFCoreGamepadController m_Wrapper;
            public ModManipulationActions(@CFCoreGamepadController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Menu => m_Wrapper.m_ModManipulation_Menu;
            public InputActionMap Get() { return m_Wrapper.m_ModManipulation; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ModManipulationActions set) { return set.Get(); }
            public void AddCallbacks(IModManipulationActions instance)
            {
                if (instance == null || m_Wrapper.m_ModManipulationActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ModManipulationActionsCallbackInterfaces.Add(instance);
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }

            private void UnregisterCallbacks(IModManipulationActions instance)
            {
                @Menu.started -= instance.OnMenu;
                @Menu.performed -= instance.OnMenu;
                @Menu.canceled -= instance.OnMenu;
            }

            public void RemoveCallbacks(IModManipulationActions instance)
            {
                if (m_Wrapper.m_ModManipulationActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IModManipulationActions instance)
            {
                foreach (var item in m_Wrapper.m_ModManipulationActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ModManipulationActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ModManipulationActions @ModManipulation => new ModManipulationActions(this);

        // Basic
        private readonly InputActionMap m_Basic;
        private List<IBasicActions> m_BasicActionsCallbackInterfaces = new List<IBasicActions>();
        private readonly InputAction m_Basic__1dNavigate;
        private readonly InputAction m_Basic_Cancel;
        private readonly InputAction m_Basic_Submit;
        private readonly InputAction m_Basic_CustomWest;
        private readonly InputAction m_Basic_CustomNorth;
        public struct BasicActions
        {
            private @CFCoreGamepadController m_Wrapper;
            public BasicActions(@CFCoreGamepadController wrapper) { m_Wrapper = wrapper; }
            public InputAction @_1dNavigate => m_Wrapper.m_Basic__1dNavigate;
            public InputAction @Cancel => m_Wrapper.m_Basic_Cancel;
            public InputAction @Submit => m_Wrapper.m_Basic_Submit;
            public InputAction @CustomWest => m_Wrapper.m_Basic_CustomWest;
            public InputAction @CustomNorth => m_Wrapper.m_Basic_CustomNorth;
            public InputActionMap Get() { return m_Wrapper.m_Basic; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BasicActions set) { return set.Get(); }
            public void AddCallbacks(IBasicActions instance)
            {
                if (instance == null || m_Wrapper.m_BasicActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BasicActionsCallbackInterfaces.Add(instance);
                @_1dNavigate.started += instance.On_1dNavigate;
                @_1dNavigate.performed += instance.On_1dNavigate;
                @_1dNavigate.canceled += instance.On_1dNavigate;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @CustomWest.started += instance.OnCustomWest;
                @CustomWest.performed += instance.OnCustomWest;
                @CustomWest.canceled += instance.OnCustomWest;
                @CustomNorth.started += instance.OnCustomNorth;
                @CustomNorth.performed += instance.OnCustomNorth;
                @CustomNorth.canceled += instance.OnCustomNorth;
            }

            private void UnregisterCallbacks(IBasicActions instance)
            {
                @_1dNavigate.started -= instance.On_1dNavigate;
                @_1dNavigate.performed -= instance.On_1dNavigate;
                @_1dNavigate.canceled -= instance.On_1dNavigate;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
                @CustomWest.started -= instance.OnCustomWest;
                @CustomWest.performed -= instance.OnCustomWest;
                @CustomWest.canceled -= instance.OnCustomWest;
                @CustomNorth.started -= instance.OnCustomNorth;
                @CustomNorth.performed -= instance.OnCustomNorth;
                @CustomNorth.canceled -= instance.OnCustomNorth;
            }

            public void RemoveCallbacks(IBasicActions instance)
            {
                if (m_Wrapper.m_BasicActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBasicActions instance)
            {
                foreach (var item in m_Wrapper.m_BasicActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BasicActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BasicActions @Basic => new BasicActions(this);

        // MouseBindings
        private readonly InputActionMap m_MouseBindings;
        private List<IMouseBindingsActions> m_MouseBindingsActionsCallbackInterfaces = new List<IMouseBindingsActions>();
        private readonly InputAction m_MouseBindings_Newaction;
        private readonly InputAction m_MouseBindings_Click;
        private readonly InputAction m_MouseBindings_Point;
        public struct MouseBindingsActions
        {
            private @CFCoreGamepadController m_Wrapper;
            public MouseBindingsActions(@CFCoreGamepadController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_MouseBindings_Newaction;
            public InputAction @Click => m_Wrapper.m_MouseBindings_Click;
            public InputAction @Point => m_Wrapper.m_MouseBindings_Point;
            public InputActionMap Get() { return m_Wrapper.m_MouseBindings; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseBindingsActions set) { return set.Get(); }
            public void AddCallbacks(IMouseBindingsActions instance)
            {
                if (instance == null || m_Wrapper.m_MouseBindingsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MouseBindingsActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
            }

            private void UnregisterCallbacks(IMouseBindingsActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
            }

            public void RemoveCallbacks(IMouseBindingsActions instance)
            {
                if (m_Wrapper.m_MouseBindingsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMouseBindingsActions instance)
            {
                foreach (var item in m_Wrapper.m_MouseBindingsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MouseBindingsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MouseBindingsActions @MouseBindings => new MouseBindingsActions(this);
        public interface IModBrowsingActions
        {
            void OnClassNavigation(InputAction.CallbackContext context);
            void OnPaginationNavigation(InputAction.CallbackContext context);
            void OnSearchND(InputAction.CallbackContext context);
            void OnSortFilterND(InputAction.CallbackContext context);
        }
        public interface IPopupActions
        {
            void OnScroll(InputAction.CallbackContext context);
        }
        public interface IVirtualKeyboardActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
        public interface IModManipulationActions
        {
            void OnMenu(InputAction.CallbackContext context);
        }
        public interface IBasicActions
        {
            void On_1dNavigate(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnCustomWest(InputAction.CallbackContext context);
            void OnCustomNorth(InputAction.CallbackContext context);
        }
        public interface IMouseBindingsActions
        {
            void OnNewaction(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
        }
    }
}
